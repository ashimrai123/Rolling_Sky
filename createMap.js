/* CREATE MAP LAYOUT
  0 = No Tile
  1 = O.T = Normal Tile
  2 = O.JT = Jump Tile
  3 = O.B = Box Obstacle 
  4 = O.MT = Moving Tile 
  5 = O.MJT = Moving Jump Tile 
  99 = O.ET = End Tile
  To Make : CheckPoint Tile */

//enum
const O = {
  T: 1,
  JT: 2,
  B: 3,
  MT: 4,
  MJT: 5,
  ET: 99,
};

const data = [
  [O.T, O.T, O.T, O.T, O.T], //our start
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  //jump test
//   [O.T, O.T, O.T, O.T, O.T],
//   [O.JT, O.JT, O.JT, O.JT, O.JT],
//   [O.JT, O.JT, O.JT, O.JT, O.JT],
//   [O.JT, O.JT, O.JT, O.JT, O.JT],
//   [O.JT, O.JT, O.JT, O.JT, O.JT],
//   [O.JT, O.JT, O.JT, O.JT, O.JT],

  //  first
  [0, 0, O.MT, 0, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  //second
  [0, 0, O.MJT, 0, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  //third
  [0, O.B, O.T, O.B, 0],
  [0, O.B, O.T, O.B, 0],
  [0, 0, O.T, 0, 0],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  //fourth
  [0, O.T, O.JT, O.T, 0],
  [0, O.T, O.B, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.JT, 0, O.JT, 0],
  [0, 0, 0, 0, 0],
  [0, O.T, O.T, O.T, 0],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  //fifth, implemented problem as a long jump feature, BRIDGE JUMP
  [O.B, O.T, O.B, O.B, O.B],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],

  [O.T, O.B, O.JT, O.B, 0],
  [0, 0, O.JT, 0, 0],
  [0, 0, 0, 0, 0],


  [0, 0, O.MJT, 0, 0],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0],


  [0, 0, O.T, 0, 0],
  [0, O.B, O.T, O.B, 0],

  //sixth, puzzle
  [0, 0, O.T, 0, 0],
  [0, 0, O.T, 0, 0],
  [0, 0, O.T, 0, 0],
  [0, 0, O.T, 0, 0],
  [0, 0, O.T, 0, 0],
  [0, 0, O.T, 0, 0],
  [0, 0, O.T, 0, 0],
  [0, 0, O.T, 0, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.JT, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.JT, 0, O.JT, 0],
  [0, O.B, 0, O.B, 0],
  [0, 0, 0, 0, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.B, O.T, O.T, 0],
  [0, O.B, O.T, O.T, 0],
  [0, O.B, O.T, O.T, 0],
  [0, O.B, O.T, O.T, 0],
  [0, O.B, O.T, O.T, 0],
  [0, O.B, O.T, O.T, 0],
  [0, O.B, O.T, O.T, 0],
  [0, O.B, O.T, O.T, 0],
  [0, O.B, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, O.T, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  // [0, O.T, 0, O.T, 0],
  // [O.JT, O.T, O.JT, O.T, O.JT],
  // [0, O.JT, 0, O.JT, 0],
  // [0, 0, 0, 0, 0],
  // [0, O.JT, 0, O.JT, 0],
  // [0, 0, 0, 0, 0],
  // [0, 0, 0, 0, 0],
  // [0, O.JT, 0, O.JT, 0],
  // [0, 0, 0, 0, 0],
  // [0, 0, 0, 0, 0],
  // [0, O.JT, 0, O.JT, 0],
  // [0, 0, 0, 0, 0],
  // [0, 0, 0, 0, 0],
  // [0, O.JT, 0, O.JT, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [0, O.T, 0, O.T, 0],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.T, O.T, O.T, O.T, O.T],
  [O.ET, O.ET, O.ET, O.ET, O.ET],
  [O.ET, O.ET, O.ET, O.ET, O.ET],
  [O.ET, O.ET, O.ET, O.ET, O.ET],
  [O.ET, O.ET, O.ET, O.ET, O.ET],
];
